#!/bin/bash

# ðŸš€ Enhanced Environment Generator Script for Codemagic Builds
# Generates comprehensive Dart environment configuration files with all required features

# Source logging utilities
source "$(dirname "$0")/logging.sh"

log_section "Enhanced Environment Configuration Generator"

# Function to generate Dart environment file
generate_dart_env() {
    local output_file="lib/config/env_config.dart"
    
    log_step "Generating comprehensive Dart environment configuration file: $output_file"
    
    # Create the Dart file content with property names that match existing code
    cat > "$output_file" << 'EOF'
// ðŸš€ Auto-generated Environment Configuration
// Generated by Codemagic CI/CD pipeline
// DO NOT EDIT MANUALLY - Changes will be overwritten on next build

class EnvConfig {
  // ============================================================================
  // APP METADATA & IDENTIFICATION
  // ============================================================================
  static const String projectId = String.fromEnvironment('PROJECT_ID', defaultValue: '');
  static const String appName = String.fromEnvironment('APP_NAME', defaultValue: 'QuikApp');
  static const String versionName = String.fromEnvironment('VERSION_NAME', defaultValue: '1.0.0');
  static const int versionCode = int.fromEnvironment('VERSION_CODE', defaultValue: 1);
  static const String workflowId = String.fromEnvironment('WORKFLOW_ID', defaultValue: '');
  static const String appId = String.fromEnvironment('APP_ID', defaultValue: '');
  static const String bundleId = String.fromEnvironment('BUNDLE_ID', defaultValue: '');
  static const String pkgName = String.fromEnvironment('PKG_NAME', defaultValue: '');
  
  // ============================================================================
  // ORGANIZATION & CONTACT
  // ============================================================================
  static const String orgName = String.fromEnvironment('ORG_NAME', defaultValue: '');
  static const String webUrl = String.fromEnvironment('WEB_URL', defaultValue: '');
  static const String emailId = String.fromEnvironment('EMAIL_ID', defaultValue: '');
  static const String userName = String.fromEnvironment('USER_NAME', defaultValue: '');
  
  // ============================================================================
  // CORE FEATURE FLAGS
  // ============================================================================
  static const bool isChatbot = bool.fromEnvironment('IS_CHATBOT', defaultValue: false);
  static const bool isDomainUrl = bool.fromEnvironment('IS_DOMAIN_URL', defaultValue: false);
  static const bool isSplash = bool.fromEnvironment('IS_SPLASH', defaultValue: false);
  static const bool isPulldown = bool.fromEnvironment('IS_PULLDOWN', defaultValue: false);
  static const bool isBottommenu = bool.fromEnvironment('IS_BOTTOMMENU', defaultValue: false);
  static const bool isLoadIndicator = bool.fromEnvironment('IS_LOAD_IND', defaultValue: false);
  
  // ============================================================================
  // PUSH NOTIFICATIONS & FIREBASE
  // ============================================================================
  static const bool pushNotify = bool.fromEnvironment('PUSH_NOTIFY', defaultValue: false);
  static const String firebaseConfigAndroid = String.fromEnvironment('FIREBASE_CONFIG_ANDROID', defaultValue: '');
  static const String firebaseConfigIos = String.fromEnvironment('FIREBASE_CONFIG_IOS', defaultValue: '');
  
  // ============================================================================
  // OAUTH AUTHENTICATION
  // ============================================================================
  static const bool isGoogleAuth = bool.fromEnvironment('IS_GOOGLE_AUTH', defaultValue: false);
  static const bool isAppleAuth = bool.fromEnvironment('IS_APPLE_AUTH', defaultValue: false);
  static const String appleTeamId = String.fromEnvironment('APPLE_TEAM_ID', defaultValue: '');
  
  // ============================================================================
  // PERMISSIONS & CAPABILITIES
  // ============================================================================
  static const bool isCamera = bool.fromEnvironment('IS_CAMERA', defaultValue: false);
  static const bool isLocation = bool.fromEnvironment('IS_LOCATION', defaultValue: false);
  static const bool isMic = bool.fromEnvironment('IS_MIC', defaultValue: false);
  static const bool isNotification = bool.fromEnvironment('IS_NOTIFICATION', defaultValue: false);
  static const bool isContact = bool.fromEnvironment('IS_CONTACT', defaultValue: false);
  static const bool isBiometric = bool.fromEnvironment('IS_BIOMETRIC', defaultValue: false);
  static const bool isCalendar = bool.fromEnvironment('IS_CALENDAR', defaultValue: false);
  static const bool isStorage = bool.fromEnvironment('IS_STORAGE', defaultValue: false);
  
  // ============================================================================
  // UI CUSTOMIZATION - LOGO & BRANDING
  // ============================================================================
  static const String logoUrl = String.fromEnvironment('LOGO_URL', defaultValue: '');
  static const String splashUrl = String.fromEnvironment('SPLASH_URL', defaultValue: '');
  static const String splashBg = String.fromEnvironment('SPLASH_BG', defaultValue: '');
  static const String splashBgColor = String.fromEnvironment('SPLASH_BG_COLOR', defaultValue: '#FFFFFF');
  
  // ============================================================================
  // SPLASH SCREEN CUSTOMIZATION
  // ============================================================================
  static const String splashTagline = String.fromEnvironment('SPLASH_TAGLINE', defaultValue: '');
  static const String splashTaglineColor = String.fromEnvironment('SPLASH_TAGLINE_COLOR', defaultValue: '#000000');
  static const String splashTaglineFont = String.fromEnvironment('SPLASH_TAGLINE_FONT', defaultValue: 'Roboto');
  static const String splashTaglineSize = String.fromEnvironment('SPLASH_TAGLINE_SIZE', defaultValue: '24');
  static const bool splashTaglineBold = bool.fromEnvironment('SPLASH_TAGLINE_BOLD', defaultValue: false);
  static const bool splashTaglineItalic = bool.fromEnvironment('SPLASH_TAGLINE_ITALIC', defaultValue: false);
  static const String splashAnimation = String.fromEnvironment('SPLASH_ANIMATION', defaultValue: 'fade');
  static const int splashDuration = int.fromEnvironment('SPLASH_DURATION', defaultValue: 3);
  
  // ============================================================================
  // BOTTOM NAVIGATION BAR CUSTOMIZATION
  // ============================================================================
  static const String bottommenuItems = String.fromEnvironment('BOTTOMMENU_ITEMS', defaultValue: '[]');
  static const String bottommenuBgColor = String.fromEnvironment('BOTTOMMENU_BG_COLOR', defaultValue: '#FFFFFF');
  static const String bottommenuIconColor = String.fromEnvironment('BOTTOMMENU_ICON_COLOR', defaultValue: '#000000');
  static const String bottommenuTextColor = String.fromEnvironment('BOTTOMMENU_TEXT_COLOR', defaultValue: '#000000');
  static const String bottommenuFont = String.fromEnvironment('BOTTOMMENU_FONT', defaultValue: 'Roboto');
  static const double bottommenuFontSize = 12.0; // TODO: Make configurable via env var
  static const bool bottommenuFontBold = bool.fromEnvironment('BOTTOMMENU_FONT_BOLD', defaultValue: false);
  static const bool bottommenuFontItalic = bool.fromEnvironment('BOTTOMMENU_FONT_ITALIC', defaultValue: false);
  static const String bottommenuActiveTabColor = String.fromEnvironment('BOTTOMMENU_ACTIVE_TAB_COLOR', defaultValue: '#007AFF');
  static const String bottommenuIconPosition = String.fromEnvironment('BOTTOMMENU_ICON_POSITION', defaultValue: 'above');
  
  // ============================================================================
  // PULL TO REFRESH & LOADING INDICATORS
  // ============================================================================
  static const bool enablePullToRefresh = bool.fromEnvironment('IS_PULLDOWN', defaultValue: false);
  static const bool showLoadingIndicators = bool.fromEnvironment('IS_LOAD_IND', defaultValue: false);
  
  // ============================================================================
  // iOS SPECIFIC CONFIGURATION
  // ============================================================================
  static const String apnsKeyId = String.fromEnvironment('APNS_KEY_ID', defaultValue: '');
  static const String apnsAuthKeyUrl = String.fromEnvironment('APNS_AUTH_KEY_URL', defaultValue: '');
  
  // ============================================================================
  // EMAIL NOTIFICATION SYSTEM
  // ============================================================================
  static const bool enableEmailNotifications = bool.fromEnvironment('ENABLE_EMAIL_NOTIFICATIONS', defaultValue: false);
  static const String emailSmtpServer = String.fromEnvironment('EMAIL_SMTP_SERVER', defaultValue: '');
  static const String emailSmtpPort = String.fromEnvironment('EMAIL_SMTP_PORT', defaultValue: '');
  static const String emailSmtpUser = String.fromEnvironment('EMAIL_SMTP_USER', defaultValue: '');
  static const String emailSmtpPass = String.fromEnvironment('EMAIL_SMTP_PASS', defaultValue: '');
  
  // ============================================================================
  // BUILD INFORMATION & METADATA
  // ============================================================================
  static const String buildTime = String.fromEnvironment('BUILD_TIME', defaultValue: '');
  static const String buildNumber = String.fromEnvironment('BUILD_NUMBER', defaultValue: '');
  static const String gitBranch = String.fromEnvironment('BRANCH', defaultValue: '');
  static const String gitCommit = String.fromEnvironment('COMMIT', defaultValue: '');
  
  // ============================================================================
  // HELPER METHODS & COMPUTED PROPERTIES
  // ============================================================================
  
  // Build Environment Detection
  static bool get isProduction => workflowId.contains('publish') || workflowId.contains('production');
  static bool get isDevelopment => workflowId.contains('free') || workflowId.contains('development');
  static bool get isTestFlight => workflowId.contains('ios') && isProduction;
  
  // Feature Validation
  static bool get hasValidFirebaseConfig => 
    firebaseConfigAndroid.isNotEmpty || firebaseConfigIos.isNotEmpty;
    
  static bool get hasValidSigningConfig => 
    (workflowId.contains('android') && pkgName.isNotEmpty) ||
    (workflowId.contains('ios') && bundleId.isNotEmpty && appleTeamId.isNotEmpty);
  
  // Push Notification Validation
  static bool get hasValidPushNotificationConfig =>
    pushNotify && hasValidFirebaseConfig;
  
  // Authentication Validation
  static bool get hasValidAuthConfig =>
    isGoogleAuth || isAppleAuth;
  
  // UI Customization Validation
  static bool get hasValidUICustomization =>
    logoUrl.isNotEmpty || splashUrl.isNotEmpty || bottommenuItems != '[]';
  
  // Email System Validation
  static bool get hasValidEmailConfig =>
    enableEmailNotifications && 
    emailSmtpServer.isNotEmpty && 
    emailSmtpUser.isNotEmpty && 
    emailSmtpPass.isNotEmpty;
  
  // Permission Summary
  static bool get hasAnyPermissions =>
    isCamera || isLocation || isMic || isNotification || 
    isContact || isBiometric || isCalendar || isStorage;
  
  // ============================================================================
  // CONFIGURATION SUMMARY METHODS
  // ============================================================================
  
  // Get all enabled features as a list
  static List<String> get enabledFeatures {
    final features = <String>[];
    if (isChatbot) features.add('Chatbot');
    if (isDomainUrl) features.add('Domain URL');
    if (isSplash) features.add('Custom Splash');
    if (isPulldown) features.add('Pull to Refresh');
    if (isBottommenu) features.add('Bottom Navigation');
    if (isLoadIndicator) features.add('Loading Indicators');
    if (pushNotify) features.add('Push Notifications');
    if (isGoogleAuth) features.add('Google Sign-In');
    if (isAppleAuth) features.add('Apple Sign-In');
    if (isCamera) features.add('Camera');
    if (isLocation) features.add('Location');
    if (isMic) features.add('Microphone');
    if (isNotification) features.add('Notifications');
    if (isContact) features.add('Contacts');
    if (isBiometric) features.add('Biometric');
    if (isCalendar) features.add('Calendar');
    if (isStorage) features.add('Storage');
    if (enableEmailNotifications) features.add('Email Notifications');
    return features;
  }
  
  // Get configuration status
  static Map<String, bool> get configurationStatus {
    return {
      'Firebase': hasValidFirebaseConfig,
      'Push Notifications': hasValidPushNotificationConfig,
      'Authentication': hasValidAuthConfig,
      'UI Customization': hasValidUICustomization,
      'Email System': hasValidEmailConfig,
      'Permissions': hasAnyPermissions,
      'Code Signing': hasValidSigningConfig,
    };
  }
  
  // Get missing configurations
  static List<String> get missingConfigurations {
    final missing = <String>[];
    if (!hasValidFirebaseConfig && pushNotify) missing.add('Firebase Configuration');
    if (!hasValidAuthConfig) missing.add('OAuth Configuration');
    if (!hasValidEmailConfig && enableEmailNotifications) missing.add('Email Configuration');
    if (!hasValidSigningConfig) missing.add('Code Signing');
    return missing;
  }
}
EOF

    log_success "Generated comprehensive Dart environment file: $output_file"
    
    # Display key configuration values (informational only, no validation)
    log_info "Configuration values (using defaults if not set):"
    log_info "  - App Name: ${APP_NAME:-'Using default: QuikApp'}"
    log_info "  - Version: ${VERSION_NAME:-'Using default: 1.0.0'} (${VERSION_CODE:-'Using default: 1'})"
    log_info "  - Workflow: ${WORKFLOW_ID:-'Using default: empty'}"
    log_info "  - Bundle ID: ${BUNDLE_ID:-'Using default: empty'}"
    log_info "  - Package Name: ${PKG_NAME:-'Using default: empty'}"
    
    # Display feature status (informational only, no validation)
    log_info "Feature status (using defaults if not set):"
    log_info "  - Push Notifications: ${PUSH_NOTIFY:-'Using default: false'}"
    log_info "  - Chatbot: ${IS_CHATBOT:-'Using default: false'}"
    log_info "  - Google Auth: ${IS_GOOGLE_AUTH:-'Using default: false'}"
    log_info "  - Apple Auth: ${IS_APPLE_AUTH:-'Using default: false'}"
    log_info "  - Custom UI: ${IS_SPLASH:-'Using default: false'}"
    log_info "  - Bottom Menu: ${IS_BOTTOMMENU:-'Using default: false'}"
    log_info "  - Pull to Refresh: ${IS_PULLDOWN:-'Using default: false'}"
    log_info "  - Loading Indicators: ${IS_LOAD_IND:-'Using default: false'}"
    log_info "  - Email Notifications: ${ENABLE_EMAIL_NOTIFICATIONS:-'Using default: false'}"
}

# Function to display environment information (no validation, just info)
display_environment_info() {
    log_step "Displaying environment information (no validation required)"
    
    # Always proceed regardless of missing variables
    log_info "Environment variables found:"
    log_info "  - PROJECT_ID: ${PROJECT_ID:-'Not set (will use default)'}"
    log_info "  - APP_NAME: ${APP_NAME:-'Not set (will use default)'}"
    log_info "  - VERSION_NAME: ${VERSION_NAME:-'Not set (will use default)'}"
    log_info "  - VERSION_CODE: ${VERSION_CODE:-'Not set (will use default)'}"
    log_info "  - WORKFLOW_ID: ${WORKFLOW_ID:-'Not set (will use default)'}"
    
    log_info "Feature flags found:"
    log_info "  - PUSH_NOTIFY: ${PUSH_NOTIFY:-'Not set (will use default: false)'}"
    log_info "  - IS_CHATBOT: ${IS_CHATBOT:-'Not set (will use default: false)'}"
    log_info "  - IS_GOOGLE_AUTH: ${IS_GOOGLE_AUTH:-'Not set (will use default: false)'}"
    log_info "  - IS_APPLE_AUTH: ${IS_APPLE_AUTH:-'Not set (will use default: false)'}"
    
    log_success "Environment information displayed (workflow will continue regardless of missing variables)"
}

# Function to display feature configuration info (no validation, just info)
display_feature_info() {
    log_step "Displaying feature configuration information (no validation required)"
    
    # Always proceed regardless of configuration state
    log_info "Feature configurations (using defaults if not set):"
    
    # Push Notifications info
    if [[ "${PUSH_NOTIFY:-}" == "true" ]]; then
        log_info "  - Push Notifications: Enabled"
        log_info "    - Android Firebase Config: ${FIREBASE_CONFIG_ANDROID:-'Not set (will use default)'}"
        log_info "    - iOS Firebase Config: ${FIREBASE_CONFIG_IOS:-'Not set (will use default)'}"
    else
        log_info "  - Push Notifications: ${PUSH_NOTIFY:-'Not set (will use default: false)'}"
    fi
    
    # Google Auth info
    if [[ "${IS_GOOGLE_AUTH:-}" == "true" ]]; then
        log_info "  - Google Auth: Enabled"
        log_info "    - Firebase Config: ${FIREBASE_CONFIG_ANDROID:-'Not set (will use default)'}"
    else
        log_info "  - Google Auth: ${IS_GOOGLE_AUTH:-'Not set (will use default: false)'}"
    fi
    
    # Apple Auth info
    if [[ "${IS_APPLE_AUTH:-}" == "true" ]]; then
        log_info "  - Apple Auth: Enabled"
        log_info "    - Team ID: ${APPLE_TEAM_ID:-'Not set (will use default)'}"
    else
        log_info "  - Apple Auth: ${IS_APPLE_AUTH:-'Not set (will use default: false)'}"
    fi
    
    # Email info
    if [[ "${ENABLE_EMAIL_NOTIFICATIONS:-}" == "true" ]]; then
        log_info "  - Email Notifications: Enabled"
        log_info "    - SMTP Server: ${EMAIL_SMTP_SERVER:-'Not set (will use default)'}"
        log_info "    - SMTP User: ${EMAIL_SMTP_USER:-'Not set (will use default)'}"
    else
        log_info "  - Email Notifications: ${ENABLE_EMAIL_NOTIFICATIONS:-'Not set (will use default: false)'}"
    fi
    
    log_success "Feature information displayed (workflow will continue regardless of configuration state)"
}

# Main execution
main() {
    log_info "Starting enhanced environment configuration generation"
    
    # Display environment information (no validation required)
    display_environment_info
    
    # Display feature information (no validation required)
    display_feature_info
    
    # Generate Dart environment file (always proceeds)
    generate_dart_env
    
    log_success "Enhanced environment configuration generation completed successfully"
    log_info "Note: Workflow continues regardless of missing or empty variables"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
