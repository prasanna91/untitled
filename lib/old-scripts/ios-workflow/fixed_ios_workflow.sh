#!/usr/bin/env bash

# 🚀 Fixed iOS Workflow Script
# Comprehensive solution for iOS builds with dynamic configuration
# Addresses all issues found in build logs

set -euo pipefail
trap 'echo "❌ Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

# =============================================================================
# LOGGING FUNCTIONS
# =============================================================================

log_info() { echo "ℹ️ $1"; }
log_success() { echo "✅ $1"; }
log_error() { echo "❌ $1"; }
log_warning() { echo "⚠️ $1"; }
log() { echo "📌 $1"; }

# =============================================================================
# ENVIRONMENT VALIDATION
# =============================================================================

validate_environment() {
    log_info "🔍 Validating build environment..."
    
    # Check required variables
    local required_vars=(
        "BUNDLE_ID" "APP_NAME" "VERSION_NAME" "VERSION_CODE"
        "APPLE_TEAM_ID" "CERT_PASSWORD" "PROFILE_URL"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            log_error "Missing required environment variable: $var"
            exit 1
        fi
    done
    
    log_success "Environment validation passed"
}

# =============================================================================
# ENVIRONMENT CONFIGURATION GENERATION (FIXED)
# =============================================================================

generate_environment_config() {
    log_info "📝 Generating environment configuration..."
    
    # Create backup
    if [ -f "lib/config/env_config.dart" ]; then
        cp lib/config/env_config.dart lib/config/env_config.dart.backup.$(date +%Y%m%d_%H%M%S)
        log "Backed up existing env_config.dart"
    fi
    
    # Function to escape strings for Dart
    escape_dart_string() {
        local input="$1"
        # Escape backslashes first
        input="${input//\\/\\\\}"
        # Escape quotes
        input="${input//\"/\\\"}"
        # Escape newlines
        input="${input//$'\n'/\\n}"
        # Escape carriage returns
        input="${input//$'\r'/\\r}"
        # Escape tabs
        input="${input//$'\t'/\\t}"
        echo "$input"
    }
    
    # Escape problematic variables
    local escaped_bottommenu_items=$(escape_dart_string "${BOTTOMMENU_ITEMS:-[]}")
    local escaped_firebase_android=$(escape_dart_string "${FIREBASE_CONFIG_ANDROID:-}")
    local escaped_firebase_ios=$(escape_dart_string "${FIREBASE_CONFIG_IOS:-}")
    local escaped_cert_cer_url=$(escape_dart_string "${CERT_CER_URL:-}")
    local escaped_cert_key_url=$(escape_dart_string "${CERT_KEY_URL:-}")
    local escaped_key_store_url=$(escape_dart_string "${KEY_STORE_URL:-}")
    local escaped_cm_keystore_password=$(escape_dart_string "${CM_KEYSTORE_PASSWORD:-}")
    local escaped_cm_key_alias=$(escape_dart_string "${CM_KEY_ALIAS:-}")
    local escaped_cm_key_password=$(escape_dart_string "${CM_KEY_PASSWORD:-}")
    local escaped_cert_password=$(escape_dart_string "${CERT_PASSWORD:-}")
    local escaped_profile_url=$(escape_dart_string "${PROFILE_URL:-}")
    local escaped_cert_p12_url=$(escape_dart_string "${CERT_P12_URL:-}")
    local escaped_email_smtp_pass=$(escape_dart_string "${EMAIL_SMTP_PASS:-}")
    
    # Generate with proper encoding (no emojis)
    cat > lib/config/env_config.dart.tmp <<EOF
// GENERATED FILE: DO NOT EDIT
//
// This file is generated by lib/scripts/ios-workflow/fixed_ios_workflow.sh
// It contains all environment-specific variables for the app.

class EnvConfig {
  // App Metadata
  static const String projectId = "${PROJECT_ID:-}";
  static const String appId = "${APP_ID:-}";
  static const String versionName = "${VERSION_NAME:-1.0.0}";
  static const int versionCode = ${VERSION_CODE:-1};
  static const String appName = "${APP_NAME:-QuikApp}";
  static const String orgName = "${ORG_NAME:-}";
  static const String webUrl = "${WEB_URL:-}";
  static const String userName = "${USER_NAME:-}";
  static const String emailId = "${EMAIL_ID:-}";
  static const String branch = "${BRANCH:-main}";
  static const String workflowId = "${WORKFLOW_ID:-ios-workflow}";

  // Package Identifiers
  static const String pkgName = "${PKG_NAME:-}";
  static const String bundleId = "${BUNDLE_ID:-}";

  // Feature Flags (converted to bool)
  static const bool pushNotify = ${PUSH_NOTIFY:-false};
  static const bool isChatbot = ${IS_CHATBOT:-false};
  static const bool isDomainUrl = ${IS_DOMAIN_URL:-false};
  static const bool isSplash = ${IS_SPLASH:-true};
  static const bool isPulldown = ${IS_PULLDOWN:-true};
  static const bool isBottommenu = ${IS_BOTTOMMENU:-true};
  static const bool isLoadIndicator = ${IS_LOAD_IND:-true};

  // Permissions (converted to bool)
  static const bool isCamera = ${IS_CAMERA:-false};
  static const bool isLocation = ${IS_LOCATION:-false};
  static const bool isMic = ${IS_MIC:-false};
  static const bool isNotification = ${IS_NOTIFICATION:-false};
  static const bool isContact = ${IS_CONTACT:-false};
  static const bool isBiometric = ${IS_BIOMETRIC:-false};
  static const bool isCalendar = ${IS_CALENDAR:-false};
  static const bool isStorage = ${IS_STORAGE:-false};

  // OAuth Authentication
  static const bool isGoogleAuth = ${IS_GOOGLE_AUTH:-false};
  static const bool isAppleAuth = ${IS_APPLE_AUTH:-false};

  // UI/Branding
  static const String logoUrl = "${LOGO_URL:-}";
  static const String splashUrl = "${SPLASH_URL:-}";
  static const String splashBg = "${SPLASH_BG_URL:-}";
  static const String splashBgColor = "${SPLASH_BG_COLOR:-#FFFFFF}";
  static const String splashTagline = "${SPLASH_TAGLINE:-}";
  static const String splashTaglineColor = "${SPLASH_TAGLINE_COLOR:-#000000}";
  static const String splashTaglineFont = "${SPLASH_TAGLINE_FONT:-Roboto}";
  static const String splashTaglineSize = "${SPLASH_TAGLINE_SIZE:-16}";
  static const bool splashTaglineBold = ${SPLASH_TAGLINE_BOLD:-false};
  static const bool splashTaglineItalic = ${SPLASH_TAGLINE_ITALIC:-false};
  static const String splashAnimation = "${SPLASH_ANIMATION:-none}";
  static const int splashDuration = ${SPLASH_DURATION:-3};

  // Bottom Menu Configuration
  static const String bottommenuItems = "$escaped_bottommenu_items";
  static const String bottommenuBgColor = "${BOTTOMMENU_BG_COLOR:-#FFFFFF}";
  static const String bottommenuIconColor = "${BOTTOMMENU_ICON_COLOR:-#000000}";
  static const String bottommenuTextColor = "${BOTTOMMENU_TEXT_COLOR:-#000000}";
  static const String bottommenuFont = "${BOTTOMMENU_FONT:-DM Sans}";
  static const double bottommenuFontSize = ${BOTTOMMENU_FONT_SIZE:-14.0};
  static const bool bottommenuFontBold = ${BOTTOMMENU_FONT_BOLD:-false};
  static const bool bottommenuFontItalic = ${BOTTOMMENU_FONT_ITALIC:-false};
  static const String bottommenuActiveTabColor = "${BOTTOMMENU_ACTIVE_TAB_COLOR:-#0000FF}";
  static const String bottommenuIconPosition = "${BOTTOMMENU_ICON_POSITION:-top}";
  static const String bottommenuVisibleOn = "${BOTTOMMENU_VISIBLE_ON:-}";

  // Firebase Configuration
  static const String firebaseConfigAndroid = "$escaped_firebase_android";
  static const String firebaseConfigIos = "$escaped_firebase_ios";

  // Android Signing
  static const String keyStoreUrl = "$escaped_key_store_url";
  static const String cmKeystorePassword = "$escaped_cm_keystore_password";
  static const String cmKeyAlias = "$escaped_cm_key_alias";
  static const String cmKeyPassword = "$escaped_cm_key_password";

  // iOS Signing
  static const String appleTeamId = "${APPLE_TEAM_ID:-}";
  static const String apnsKeyId = "${APNS_KEY_ID:-}";
  static const String apnsAuthKeyUrl = "${APNS_AUTH_KEY_URL:-}";
  static const String certPassword = "$escaped_cert_password";
  static const String profileUrl = "$escaped_profile_url";
  static const String certP12Url = "$escaped_cert_p12_url";
  static const String certCerUrl = "$escaped_cert_cer_url";
  static const String certKeyUrl = "$escaped_cert_key_url";
  static const String profileType = "${PROFILE_TYPE:-app-store}";
  static const String appStoreConnectKeyIdentifier = "${APP_STORE_CONNECT_KEY_IDENTIFIER:-}";

  // Email Configuration
  static const bool enableEmailNotifications = ${ENABLE_EMAIL_NOTIFICATIONS:-false};
  static const String emailSmtpServer = "${EMAIL_SMTP_SERVER:-}";
  static const int emailSmtpPort = ${EMAIL_SMTP_PORT:-587};
  static const String emailSmtpUser = "${EMAIL_SMTP_USER:-}";
  static const String emailSmtpPass = "$escaped_email_smtp_pass";

  // Build Environment
  static const String buildId = "${BUILD_ID:-unknown}";
  static const String buildDir = "${BUILD_DIR:-}";
  static const String projectRoot = "${PROJECT_ROOT:-}";
  static const String outputDir = "${OUTPUT_DIR:-output}";

  // Memory and Performance Settings
  static const String gradleOpts = "${GRADLE_OPTS:-}";
  static const int xcodeParallelJobs = ${XCODE_PARALLEL_JOBS:-4};
  static const String flutterBuildArgs = "${FLUTTER_BUILD_ARGS:-}";

  // Utility Methods
  static bool get isAndroidBuild => workflowId.startsWith('android');
  static bool get isIosBuild => workflowId.contains('ios');
  static bool get isCombinedBuild => workflowId == 'combined';
  static bool get hasFirebase => firebaseConfigAndroid.isNotEmpty || firebaseConfigIos.isNotEmpty;
  static bool get hasKeystore => keyStoreUrl.isNotEmpty;
  static bool get hasIosSigning => certPassword.isNotEmpty && profileUrl.isNotEmpty;
}
EOF

    # Atomic move to prevent corruption
    mv lib/config/env_config.dart.tmp lib/config/env_config.dart
    
    # Validate the generated file
    if flutter analyze lib/config/env_config.dart >/dev/null 2>&1; then
        log_success "Environment configuration generated successfully"
    else
        log_error "Environment configuration has syntax errors"
        flutter analyze lib/config/env_config.dart
        exit 1
    fi
}

# =============================================================================
# CODE SIGNING SETUP
# =============================================================================

setup_code_signing() {
    log_info "🔐 Setting up code signing..."
    
    # Initialize keychain
    keychain initialize
    
    # Setup provisioning profile
    local profiles_home="$HOME/Library/MobileDevice/Provisioning Profiles"
    mkdir -p "$profiles_home"
    
    if [[ -n "$PROFILE_URL" ]]; then
        local profile_path="$profiles_home/app_store.mobileprovision"
        
        if [[ "$PROFILE_URL" == http* ]]; then
            curl -fSL "$PROFILE_URL" -o "$profile_path"
            log_success "Downloaded provisioning profile"
        else
            cp "$PROFILE_URL" "$profile_path"
            log_success "Copied provisioning profile"
        fi
        
        # Extract UUID
        security cms -D -i "$profile_path" > /tmp/profile.plist
        local uuid=$(/usr/libexec/PlistBuddy -c "Print UUID" /tmp/profile.plist 2>/dev/null || echo "")
        if [[ -n "$uuid" ]]; then
            log_info "Provisioning Profile UUID: $uuid"
        fi
    fi
    
    # Setup certificate
    if [[ -n "$CERT_P12_URL" && -n "$CERT_PASSWORD" ]]; then
        curl -fSL "$CERT_P12_URL" -o /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password "$CERT_PASSWORD"
        log_success "Certificate added to keychain"
    elif [[ -n "$CERT_CER_URL" && -n "$CERT_KEY_URL" ]]; then
        curl -fSL "$CERT_CER_URL" -o /tmp/certificate.cer
        curl -fSL "$CERT_KEY_URL" -o /tmp/certificate.key
        
        # Generate P12 from CER/KEY
        openssl pkcs12 -export -in /tmp/certificate.cer -inkey /tmp/certificate.key \
            -out /tmp/certificate.p12 -passout pass:"$CERT_PASSWORD"
        
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password "$CERT_PASSWORD"
        log_success "Certificate generated and added to keychain"
    else
        log_error "No valid certificate configuration found"
        exit 1
    fi
}

# =============================================================================
# BUNDLE IDENTIFIER UPDATE
# =============================================================================

update_bundle_identifier() {
    log_info "📱 Updating bundle identifier to: $BUNDLE_ID"
    
    # Update app display name
    if [[ -n "$APP_NAME" ]]; then
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName '$APP_NAME'" ios/Runner/Info.plist 2>/dev/null || \
        /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string '$APP_NAME'" ios/Runner/Info.plist
        log_success "Updated app display name to: $APP_NAME"
    fi
    
    # Replace bundle identifiers in project files
    local default_bundle_ids=("com.example.sampleprojects.sampleProject" "com.test.app" "com.example.quikapp")
    
    for old_bundle_id in "${default_bundle_ids[@]}"; do
        find ios -name "project.pbxproj" -exec sed -i '' "s/$old_bundle_id/$BUNDLE_ID/g" {} \;
        find ios -name "Info.plist" -exec sed -i '' "s/$old_bundle_id/$BUNDLE_ID/g" {} \;
        find ios -name "*.entitlements" -exec sed -i '' "s/$old_bundle_id/$BUNDLE_ID/g" {} \;
    done
    
    # Update PRODUCT_BUNDLE_IDENTIFIER in project.pbxproj
    sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID;/g" ios/Runner.xcodeproj/project.pbxproj
    
    log_success "Bundle identifier updated successfully"
}

# =============================================================================
# PERMISSIONS CONFIGURATION
# =============================================================================

configure_permissions() {
    log_info "🔐 Configuring iOS permissions..."
    
    # Backup original Info.plist
    cp ios/Runner/Info.plist ios/Runner/Info.plist.backup
    
    # Add permissions based on environment variables
    if [[ "$IS_CHATBOT" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSSpeechRecognitionUsageDescription string 'Speech recognition is used for voice commands and chatbot functionality'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_MIC" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSMicrophoneUsageDescription string 'Microphone access is required for voice input and recording'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_CAMERA" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSCameraUsageDescription string 'Camera access is required for photo capture and scanning'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_LOCATION" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSLocationWhenInUseUsageDescription string 'Location access is required for location-based features'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_CONTACT" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSContactsUsageDescription string 'Contact access is required for contact management'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_CALENDAR" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSCalendarsUsageDescription string 'Calendar access is required for event management'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_BIOMETRIC" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSFaceIDUsageDescription string 'Face ID is used for secure authentication'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    if [[ "$IS_STORAGE" == "true" ]]; then
        /usr/libexec/PlistBuddy -c "Add :NSPhotoLibraryUsageDescription string 'Photo library access is required for image selection'" ios/Runner/Info.plist 2>/dev/null || true
        /usr/libexec/PlistBuddy -c "Add :NSPhotoLibraryAddUsageDescription string 'Photo library access is required for saving images'" ios/Runner/Info.plist 2>/dev/null || true
    fi
    
    log_success "Permissions configured successfully"
}

# =============================================================================
# ASSET DOWNLOAD AND CONFIGURATION
# =============================================================================

download_assets() {
    log_info "🎨 Downloading and configuring assets..."
    
    # Create assets directory
    mkdir -p assets/images
    
    # Download logo if provided
    if [[ -n "$LOGO_URL" ]]; then
        curl -fSL "$LOGO_URL" -o assets/images/logo.png
        log_success "Downloaded logo from: $LOGO_URL"
        
        # Copy to iOS app icon
        cp assets/images/logo.png ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png
        log_success "Updated iOS app icon"
    fi
    
    # Download splash screen if provided
    if [[ -n "$SPLASH_URL" ]]; then
        curl -fSL "$SPLASH_URL" -o assets/images/splash.png
        log_success "Downloaded splash screen from: $SPLASH_URL"
        
        # Copy to iOS splash screen
        cp assets/images/splash.png ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage.png
        log_success "Updated iOS splash screen"
    fi
}

# =============================================================================
# FLUTTER DEPENDENCIES
# =============================================================================

install_dependencies() {
    log_info "📦 Installing Flutter dependencies..."
    
    # Clean and get dependencies
    flutter clean > /dev/null 2>&1 || log_warning "flutter clean failed (continuing)"
    flutter pub get
    
    # Install CocoaPods dependencies
    cd ios
    pod install --repo-update
    cd ..
    
    log_success "Dependencies installed successfully"
}

# =============================================================================
# BUILD CONFIGURATION
# =============================================================================

configure_build() {
    log_info "🔧 Configuring build settings..."
    
    # Update release.xcconfig
    cat > ios/Flutter/Release.xcconfig <<EOF
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
#include "Generated.xcconfig"
CODE_SIGN_STYLE = Manual
DEVELOPMENT_TEAM = $APPLE_TEAM_ID
PROVISIONING_PROFILE_SPECIFIER = $(security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/app_store.mobileprovision" | /usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin)
CODE_SIGN_IDENTITY = iPhone Distribution
PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID
EOF
    
    log_success "Build configuration updated"
}

# =============================================================================
# FLUTTER BUILD
# =============================================================================

build_flutter_app() {
    log_info "📱 Building Flutter iOS app in release mode..."
    
    # Build with proper error handling
    if flutter build ios --release --no-codesign \
        --build-name="$VERSION_NAME" \
        --build-number="$VERSION_CODE" \
        2>&1 | tee flutter_build.log; then
        log_success "Flutter build completed successfully"
    else
        log_error "Flutter build failed"
        echo "=== Flutter Build Log (Errors/Warnings) ==="
        grep -E "(Error|FAILURE|Exception|error|warning|Warning)" flutter_build.log || echo "No specific errors found in log"
        echo "=== End Flutter Build Log ==="
        exit 1
    fi
}

# =============================================================================
# XCODE ARCHIVE
# =============================================================================

create_xcode_archive() {
    log_info "📦 Creating Xcode archive..."
    
    mkdir -p build/ios/archive
    
    if xcodebuild -workspace ios/Runner.xcworkspace \
        -scheme Runner \
        -configuration Release \
        -archivePath build/ios/archive/Runner.xcarchive \
        -destination 'generic/platform=iOS' \
        archive \
        DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
        2>&1 | tee xcodebuild_archive.log; then
        log_success "Xcode archive completed successfully"
    else
        log_error "Xcode archive failed"
        echo "=== Xcode Archive Log (Errors/Warnings) ==="
        grep -E "(error:|warning:|Check dependencies|Provisioning|CodeSign|FAILED)" xcodebuild_archive.log || echo "No specific errors found in log"
        echo "=== End Xcode Archive Log ==="
        exit 1
    fi
}

# =============================================================================
# EXPORT IPA
# =============================================================================

export_ipa() {
    log_info "📤 Exporting IPA..."
    
    # Create ExportOptions.plist
    cat > ios/ExportOptions.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>app-store</string>
    <key>provisioningProfiles</key>
    <dict>
        <key>$BUNDLE_ID</key>
        <string>$(security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/app_store.mobileprovision" | /usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin)</string>
    </dict>
    <key>teamID</key>
    <string>$APPLE_TEAM_ID</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>stripSwiftSymbols</key>
    <true/>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
    <key>compileBitcode</key>
    <false/>
    <key>thinning</key>
    <string>&lt;none&gt;</string>
</dict>
</plist>
EOF
    
    # Export IPA
    if xcodebuild -exportArchive \
        -archivePath build/ios/archive/Runner.xcarchive \
        -exportPath build/ios/output \
        -exportOptionsPlist ios/ExportOptions.plist; then
        log_success "IPA exported successfully"
    else
        log_error "IPA export failed"
        exit 1
    fi
    
    # Find and verify IPA
    local ipa_path=$(find build/ios/output -name "*.ipa" | head -n 1)
    if [[ -z "$ipa_path" ]]; then
        log_error "IPA file not found"
        exit 1
    fi
    
    log_success "IPA found at: $ipa_path"
    
    # Create output directory and copy IPA
    mkdir -p output/ios
    cp "$ipa_path" output/ios/
    
    log_success "IPA copied to output/ios/"
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    echo "🚀 Starting Fixed iOS Workflow..."
    
    # Environment info
    echo "📊 Build Environment:"
    echo " - Flutter: $(flutter --version | head -1)"
    echo " - Java: $(java -version 2>&1 | head -1)"
    echo " - Xcode: $(xcodebuild -version | head -1)"
    echo " - CocoaPods: $(pod --version)"
    
    # Cleanup
    echo "🧹 Pre-build cleanup..."
    flutter clean > /dev/null 2>&1 || log_warning "flutter clean failed (continuing)"
    rm -rf ~/Library/Developer/Xcode/DerivedData/* > /dev/null 2>&1 || true
    rm -rf .dart_tool/ > /dev/null 2>&1 || true
    rm -rf ios/Pods/ > /dev/null 2>&1 || true
    rm -rf ios/build/ > /dev/null 2>&1 || true
    rm -rf ios/.symlinks > /dev/null 2>&1 || true
    
    # Execute workflow steps
    validate_environment
    setup_code_signing
    update_bundle_identifier
    generate_environment_config
    configure_permissions
    download_assets
    install_dependencies
    configure_build
    build_flutter_app
    create_xcode_archive
    export_ipa
    
    log_success "🎉 Fixed iOS workflow completed successfully!"
}

# Execute main function
main "$@" 